plugins {
    // Apply the scala plugin to add support for Scala
    id 'com.google.protobuf' version '0.8.16'
    id 'scala'
}

ext {
    scalapbVersion = '0.10.10'
}

repositories {
    mavenCentral()
}

dependencies {
    // Use Scala 2.12 in our library project
    implementation 'org.scala-lang:scala-library:2.12.8'

    // Use Scalatest for testing our library
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.12:3.0.5'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.12:1.1.1'
    implementation "com.thesamet.scalapb:scalapb-runtime_2.12:${scalapbVersion}"
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.7.1'
  }
  plugins {
    scalapb {
        artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
            "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:windows@bat" :
            "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:unix@sh"
    }
  }

  generateProtoTasks {
    all().each { task ->
      task.plugins {
          scalapb {
            // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
            // option 'flat_package'
          }
      }
    }
  }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'scalapb.demo.Demo'
    classpath sourceSets.main.runtimeClasspath
}

// Add geneated Scala code as a source directory
sourceSets {
  main {
    scala {
        // Adding generated Scala code to scala source set is needed, as the
        // protobuf plugin won't add non-Java/Kotlin code to compilation tasks.
        // See https://github.com/google/protobuf-gradle-plugin/pull/375
        srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
    }
  }
}
